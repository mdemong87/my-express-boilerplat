openapi: 3.0.3
info:
  title: Gulf-Music API
  version: "1.0.0"
  description: |
    This specification describes the Gulf-Music backend endpoints as inferred from the Postman collection.
    Notes:
    - Base URL and some paths are inferred from request names. Replace with exact routes if different.
    - Auth is JWT via `Authorization: Bearer <token>` unless noted.
servers:
  - url: https://api.example.com
    description: Replace with your deployment URL.
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ApiResponse:
      type: object
      properties:
        success: { type: boolean }
        status: { type: integer }
        message: { type: string }
      required: [success, status]
    User:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        email: { type: string, format: email }
        email_verified_at: { type: string, nullable: true }
        role: { type: string, example: Artist }
        status: { type: string, example: Active }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
    LoginResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                token: { type: string, description: JWT token }
                user: { $ref: '#/components/schemas/User' }
    ValidationError:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            errors:
              type: object
              additionalProperties:
                type: array
                items: { type: string }

security:
  - bearerAuth: []

paths:
  /api/login:
    post:
      summary: Authenticate and obtain JWT
      description: Returns JWT token and user info.
      security: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string, format: email, example: mdemong87@gmail.com }
                password: { type: string, example: 1234567890 }
      responses:
        '200':
          description: Logged in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
              examples:
                success:
                  value:
                    success: true
                    status: 200
                    message: Logged in successfully
                    data:
                      token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
                      user:
                        id: 8
                        name: hossen emon
                        email: mdemong87@gmail.com
                        email_verified_at: null
                        role: Artist
                        status: Active
                        created_at: '2025-09-30T03:20:43.000000Z'
                        updated_at: '2025-09-30T03:24:28.000000Z'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiResponse' }
              examples:
                invalid:
                  value: { success: false, status: 401, message: Invalid credentials }
        '422':
          description: Validation errors
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ValidationError' }

  /api/register:
    post:
      summary: Register a new user
      security: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [name, email, password, password_confirmation]
              properties:
                name: { type: string }
                email: { type: string, format: email }
                password: { type: string, format: password }
                password_confirmation: { type: string, format: password }
      responses:
        '201':
          description: Registered successfully
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiResponse' }
        '422':
          description: Validation errors
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ValidationError' }

  /api/logout:
    post:
      summary: Logout and invalidate token
      responses:
        '200':
          description: Logged out
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiResponse' }
        '401':
          description: Unauthorized

  /api/check:
    get:
      summary: Health/auth check
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiResponse' }
        '401': { description: Unauthorized }

  /api/users:
    get:
      summary: List users
      parameters:
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
        - in: query
          name: per_page
          schema: { type: integer, minimum: 1, maximum: 100 }
        - in: query
          name: search
          schema: { type: string }
      responses:
        '200':
          description: Users list
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          users:
                            type: array
                            items: { $ref: '#/components/schemas/User' }
                          pagination:
                            type: object
                            properties:
                              page: { type: integer }
                              per_page: { type: integer }
                              total: { type: integer }
        '401': { description: Unauthorized }
        '403': { description: Forbidden }

  /api/users/{id}:
    get:
      summary: Get user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: User
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user: { $ref: '#/components/schemas/User' }
        '401': { description: Unauthorized }
        '404': { description: Not found }

  /api/products:
    get:
      summary: List products
      parameters:
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
        - in: query
          name: per_page
          schema: { type: integer, minimum: 1, maximum: 100 }
        - in: query
          name: search
          schema: { type: string }
        - in: query
          name: sort
          schema: { type: string }
      responses:
        '200': { description: Products list }
        '401': { description: Unauthorized }
    post:
      summary: Create product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, price]
              properties:
                name: { type: string }
                description: { type: string }
                price: { type: number, format: float }
                status: { type: string, enum: [Active, Inactive] }
      responses:
        '201': { description: Created }
        '401': { description: Unauthorized }
        '422': { description: Validation errors }

  /api/products/{id}:
    get:
      summary: Get product by ID
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200': { description: Product }
        '401': { description: Unauthorized }
        '404': { description: Not found }
    put:
      summary: Update product by ID
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                description: { type: string }
                price: { type: number, format: float }
                status: { type: string, enum: [Active, Inactive] }
      responses:
        '200': { description: Updated }
        '401': { description: Unauthorized }
        '404': { description: Not found }
        '422': { description: Validation errors }
    delete:
      summary: Delete product by ID
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200': { description: Deleted }
        '401': { description: Unauthorized }
        '404': { description: Not found }

  /api/songs:
    get:
      summary: List songs
      responses:
        '200': { description: Songs list }
        '401': { description: Unauthorized }
    post:
      summary: Create song
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [title, artist_id, audio_file]
              properties:
                title: { type: string }
                artist_id: { type: integer }
                audio_file: { type: string, format: binary }
                cover_image: { type: string, format: binary }
      responses:
        '201': { description: Created }
        '401': { description: Unauthorized }
        '422': { description: Validation errors }
